{"version":3,"sources":["components/Card.tsx","components/Task.tsx","components/Tasks.tsx","components/Input.tsx","components/Stats.tsx","components/theme.tsx","components/Heading.tsx","components/Switch.tsx","components/Header.tsx","App.tsx","serviceWorker.ts","index.tsx","components/check.svg"],"names":["Card","styled","div","props","theme","card","TextStyle","css","text","Container","Check","background","checked","CheckIcon","img","Label","Strikethrough","taskState","atomFamily","key","default","label","complete","Task","id","useRecoilState","setTask","onClick","src","checkIconSvg","style","opacity","tasksState","atom","Tasks","tasks","useRecoilValue","map","InsertInput","input","TaskTextStyle","Input","useState","setLabel","insertTask","useRecoilCallback","set","newTaskId","length","placeholder","type","autoComplete","value","onChange","currentTarget","onKeyUp","keyCode","StatContainer","StatValue","StatLabel","Stat","Divider","tasksCompleteState","selector","get","filter","task","tasksRemainingState","Stats","tasksComplete","tasksRemaining","colors","dark","light","GlobalStyles","createGlobalStyle","ThemeProvider","darkMode","children","Page","Up","span","Heading","Toggle","MoonOverlay","Switch","on","transform","darkModeState","Header","setDarkMode","Home","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","module","exports"],"mappings":"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","file":"static/js/main.ad4f6a2d.chunk.js","sourcesContent":["import styled from 'styled-components'\n\nexport const Card = styled.div`\n    border-radius: 25px;\n    background-color: ${(props) => props.theme.card};\n    box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    padding: 0 15px;\n`\n","import React from 'react'\nimport styled, {css} from 'styled-components'\nimport checkIconSvg from './check.svg'\nimport {Card} from './Card'\nimport {atomFamily, useRecoilState} from 'recoil'\n\nexport const TextStyle = css`\n    font-size: 17px;\n    color: ${(props) => props.theme.text};\n    font-family: inherit;\n`\n\nexport const Container = styled(Card)`\n    height: 50px;\n    margin-bottom: 20px;\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n`\n\nconst Check = styled.div<{checked: boolean}>`\n    border-radius: 50%;\n    width: 20px;\n    height: 20px;\n    margin-right: 15px;\n    transition: 0.2s all ease-in-out;\n    align-items: center;\n    justify-content: center;\n    display: flex;\n    background-color: ${(props) => props.theme.background};\n    cursor: pointer;\n\n    ${(props) =>\n        props.checked &&\n        css`\n            background-color: transparent;\n        `}\n`\n\nconst CheckIcon = styled.img`\n    transition: 0.1s opacity ease-in-out;\n`\n\nconst Label = styled.div`\n    position: relative;\n    ${TextStyle}\n`\n\nconst Strikethrough = styled.div<{checked: boolean}>`\n    position: absolute;\n    top: 50%;\n    left: -3px;\n    right: -3px;\n    height: 2px;\n    background-color: ${(props) => props.theme.text};\n    border-radius: 2px;\n    transform: scaleX(0);\n    transform-origin: center left;\n    transition: 0.1s all ease-in-out;\n\n    ${(props) =>\n        props.checked &&\n        css`\n            transform: scaleX(1);\n        `};\n`\n\nexport const taskState = atomFamily({\n    key: 'task',\n    default: {\n        label: '',\n        complete: false,\n    },\n})\n\nexport const Task: React.FC<{id: number}> = ({id}) => {\n    const [{complete, label}, setTask] = useRecoilState(taskState(id))\n\n    return (\n        <Container\n            onClick={() => {\n                setTask({\n                    label,\n                    complete: !complete,\n                })\n            }}\n        >\n            <Check checked={complete}>\n                <CheckIcon\n                    src={checkIconSvg}\n                    style={{opacity: complete ? 1 : 0}}\n                />\n            </Check>\n            <Label>\n                {label}\n                <Strikethrough checked={complete} />\n            </Label>\n        </Container>\n    )\n}\n","import React from 'react'\nimport {Task} from './Task'\nimport {atom, useRecoilValue} from 'recoil'\n\nexport const tasksState = atom<number[]>({\n    key: 'tasks',\n    default: [],\n})\n\nexport const Tasks: React.FC = () => {\n    const tasks = useRecoilValue(tasksState)\n\n    return (\n        <div>\n            {tasks.map((id) => (\n                <Task id={id} key={id} />\n            ))}\n        </div>\n    )\n}\n","import React, {useState} from 'react'\nimport styled from 'styled-components'\nimport {\n    Container as TaskContainer,\n    TextStyle as TaskTextStyle,\n    taskState,\n} from './Task'\nimport {useRecoilCallback, useRecoilValue} from 'recoil'\nimport {tasksState} from './Tasks'\n\nconst InsertInput = styled.input`\n    width: 100%;\n    height: 100%;\n    appearance: none;\n    border: 0;\n    background-color: transparent;\n    outline: none;\n    -webkit-appearance: textfield;\n    ${TaskTextStyle};\n\n    ::-webkit-search-decoration,\n    ::-webkit-search-cancel-button {\n        -webkit-appearance: none;\n    }\n`\n\nexport const Input: React.FC = () => {\n    const [label, setLabel] = useState('')\n    const tasks = useRecoilValue(tasksState)\n\n    const insertTask = useRecoilCallback(({set}) => {\n        return (label: string) => {\n            const newTaskId = tasks.length\n            set(tasksState, [...tasks, newTaskId])\n            set(taskState(newTaskId), {\n                label: label,\n                complete: false,\n            })\n        }\n    })\n\n    return (\n        <TaskContainer>\n            <InsertInput\n                placeholder=\"Insert a new task...\"\n                type=\"search\"\n                autoComplete=\"off\"\n                value={label}\n                onChange={({currentTarget}) => {\n                    setLabel(currentTarget.value)\n                }}\n                onKeyUp={({keyCode}) => {\n                    if (keyCode === 13) {\n                        insertTask(label)\n                        setLabel('')\n                    }\n                }}\n            />\n        </TaskContainer>\n    )\n}\n","import React from 'react'\nimport {Card} from './Card'\nimport styled from 'styled-components'\nimport {selector, useRecoilValue} from 'recoil'\nimport {tasksState} from './Tasks'\nimport {taskState} from './Task'\n\nconst StatContainer = styled.div`\n    flex: 1;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    color: ${(props) => props.theme.text};\n`\n\nconst StatValue = styled.div`\n    font-size: 20px;\n    font-weight: 600;\n    margin-bottom: 5px;\n`\n\nconst StatLabel = styled.div`\n    font-size: 11px;\n    text-transform: uppercase;\n`\n\nconst Stat: React.FC<{label: string; value: string | number}> = ({\n    label,\n    value,\n}) => {\n    return (\n        <StatContainer>\n            <StatValue>{value}</StatValue>\n            <StatLabel>{label}</StatLabel>\n        </StatContainer>\n    )\n}\n\nconst Divider = styled.div`\n    width: 1px;\n    height: 42px;\n    background-color: ${(props) => props.theme.text};\n    opacity: 0.3;\n`\n\nconst Container = styled(Card)`\n    padding-top: 15px;\n    padding-bottom: 15px;\n    margin-bottom: 20px;\n`\n\nconst tasksCompleteState = selector({\n    key: 'tasksComplete',\n    get: ({get}) => {\n        const taskIds = get(tasksState)\n        const tasks = taskIds.map((id) => {\n            return get(taskState(id))\n        })\n        return tasks.filter((task) => task.complete).length\n    },\n})\n\nconst tasksRemainingState = selector({\n    key: 'tasksRemaining',\n    get: ({get}) => {\n        const taskIds = get(tasksState)\n        const tasks = taskIds.map((id) => {\n            return get(taskState(id))\n        })\n        return tasks.filter((task) => !task.complete).length\n    },\n})\n\nexport const Stats: React.FC = () => {\n    const tasksComplete = useRecoilValue(tasksCompleteState)\n    const tasksRemaining = useRecoilValue(tasksRemainingState)\n\n    return (\n        <Container>\n            <Stat label=\"Tasks Complete\" value={tasksComplete} />\n            <Divider />\n            <Stat label=\"Tasks Remaining\" value={tasksRemaining} />\n        </Container>\n    )\n}\n","import React from 'react'\nimport styled, {\n    ThemeProvider as StyledThemeProvider,\n    createGlobalStyle,\n} from 'styled-components'\n\nexport const colors = {\n    dark: {\n        background: '#2d292e',\n        card: '#3c3439',\n        text: '#dce1e8',\n    },\n    light: {\n        background: '#e9ecf3',\n        card: '#ffffff',\n        text: '#2d292e',\n    },\n}\n\nexport const GlobalStyles = createGlobalStyle`\n    body {\n        background-color: ${(props: any) => props.theme.background};\n        color: ${(props: any) => props.theme.text};\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        min-height: 100vh;\n        box-sizing: border-box;\n        font-family: Sen;\n        user-select: none;\n        -webkit-font-smoothing: antialiased;\n        -moz-osx-font-smoothing: grayscale;\n        margin: 0;\n    }\n\n    #root {\n        width: 100vw;\n    }\n\n    * {\n        transition: 0.2s color ease-in-out, 0.2s background-color ease-in-out;\n    }\n`\n\ntype ThemeProviderProps = {darkMode: boolean}\n\nexport const ThemeProvider: React.FC<ThemeProviderProps> = ({\n    darkMode,\n    children,\n}) => {\n    return (\n        <StyledThemeProvider theme={darkMode ? colors.dark : colors.light}>\n            {children}\n        </StyledThemeProvider>\n    )\n}\n\nexport const Page = styled.div`\n    width: 100%;\n    max-width: 560px;\n    padding: 20px;\n    box-sizing: border-box;\n    margin: 0 auto;\n`\n","import React from 'react'\nimport styled from 'styled-components'\nimport checkIconSvg from \"./check.svg\";\n\nconst Container = styled.div`\n    font-size: 36px;\n    font-weight: 600;\n    letter-spacing: 2px;\n    color: ${(props) => props.theme.text};\n`\n\nconst CheckIcon = styled.img`\n    width: 44px;\n    height: auto;\n    margin-right: 0.5rem;\n`\n\nconst Up = styled.span`\n    color: #ffc207;\n`\n\nexport const Heading: React.FC = () => {\n    return (\n        <Container>\n            <CheckIcon src={checkIconSvg} />\n            line<Up>up</Up>\n        </Container>\n    )\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst Container = styled.div`\n    width: 60px;\n    height: 30px;\n    border-radius: 25px;\n    background-color: ${(props) => props.theme.card};\n    box-sizing: border-box;\n    padding: 4px;\n    cursor: pointer;\n    box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);\n`\n\nconst Toggle = styled.div`\n    width: 22px;\n    height: 22px;\n    border-radius: 50%;\n    background-color: #ffc207;\n    transition: 0.2s all ease-out;\n    position: relative;\n`\n\nconst MoonOverlay = styled.div`\n    position: absolute;\n    top: 50%;\n    margin-top: -10px;\n    left: -4px;\n    width: 20px;\n    height: 20px;\n    border-radius: 50%;\n    background-color: ${(props) => props.theme.card};\n    transform-origin: left center;\n    transition: 0.2s all ease-out;\n`\n\ntype SwitchProps = {\n    value: boolean\n    onChange: (value: boolean) => void\n}\n\nexport const Switch: React.FC<SwitchProps> = ({value: on, onChange}) => (\n    <Container onClick={() => onChange(!on)}>\n        <Toggle\n            style={{\n                transform: `translateX(${on ? 30 : 0}px)`,\n            }}\n        >\n            <MoonOverlay\n                style={{\n                    transform: `scale(${on ? 1 : 0})`,\n                }}\n            />\n        </Toggle>\n    </Container>\n)\n","import React from 'react'\nimport styled from 'styled-components'\nimport {Heading} from './Heading'\nimport {Switch} from './Switch'\nimport {atom, useRecoilState} from 'recoil'\n\nconst Container = styled.div`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    justify-content: space-between;\n    padding: 30px 0;\n`\n\nexport const darkModeState = atom({\n    key: 'darkMode',\n    default: true,\n})\n\nexport const Header: React.FC = () => {\n    const [darkMode, setDarkMode] = useRecoilState(darkModeState)\n\n    return (\n        <Container>\n            <Heading />\n            <Switch value={darkMode} onChange={setDarkMode} />\n        </Container>\n    )\n}\n","import React from 'react'\nimport {Input} from './components/Input'\nimport {Stats} from './components/Stats'\nimport {Tasks} from './components/Tasks'\nimport {ThemeProvider, GlobalStyles, Page} from './components/theme'\nimport {Header, darkModeState} from './components/Header'\nimport {useRecoilValue} from 'recoil'\n\nconst Home = () => {\n    return (\n        <Page>\n            <Header />\n            <Stats />\n            <Tasks />\n            <Input />\n        </Page>\n    )\n}\n\nconst App = () => {\n    const darkMode = useRecoilValue(darkModeState)\n\n    return (\n        <ThemeProvider darkMode={darkMode}>\n            <GlobalStyles />\n            <Home />\n        </ThemeProvider>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n        ),\n)\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void\n    onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config)\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA',\n                    )\n                })\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config)\n            }\n        })\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing\n                if (installingWorker == null) {\n                    return\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n                            )\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration)\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.')\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration)\n                            }\n                        }\n                    }\n                }\n            }\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error)\n        })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: {'Service-Worker': 'script'},\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type')\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload()\n                    })\n                })\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config)\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.',\n            )\n        })\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister()\n            })\n            .catch((error) => {\n                console.error(error.message)\n            })\n    }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport {RecoilRoot} from 'recoil'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n    <React.StrictMode>\n        <RecoilRoot>\n            <App />\n        </RecoilRoot>\n    </React.StrictMode>,\n    document.getElementById('root'),\n)\n\nserviceWorker.register()\n","module.exports = __webpack_public_path__ + \"static/media/check.d4fdea65.svg\";"],"sourceRoot":""}